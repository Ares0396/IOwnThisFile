v1.0.0:
- First release of the application.
- See README.md for initial setup instructions and usages.
- Check out https://github.com/Ares0396/IOwnTHisFile for source code and contributions.
- Features include file encryption and decryption using AES-GCM, file management, and viewing file properties.
   + AES-GCM is chosen with PBKDF2 key derivation for its balance of security and performance.
   + File management allows users to add, remove, and manage files they want to encrypt or decrypt.
   + Viewing file properties provides insights into basic file information and encryption status.
   + Secure deletion of files to prevent data recovery, including overwriting file data with random junk before deletion.
v1.0.1:
- Fixed a bug where the application would crash if the View Property button was enabled but no file on the File Management tab was present.
- Improved the exiting process to ensure all resources are properly released.
- Fixed a bug where the application would erase all items in the File Management tab when the user decrypted files, some of which are irrelevant to the list.
- Added cleanup process after encryption and decryption, including removing temporary operation configs and clearing all traces of cryptographic operations in the memory.
- Improved the IO-Locked date and time so that users can see the exact time when the file was locked, even if it's not locked anymore.
v1.0.2:
- Fixed a bug where the application would not delete the once-IO-Locked file in the File Management tab after it was decrypted.
- Increased iteration count to 500 000 so AES-GCM indirectly becomes more secure than ever (via key reinforcement).
- Optimized internal UI handling.
v1.1.0:
- Added a new feature: Check for updates.
   + The application will now check for updates on startup by default and notify the user if a new version is available.
   + Users can choose to download the latest version directly from the notification.
   + Users can also choose not to receive any more update notifications in the settings.
   + While updating, users can cancel the update.
- Added a new feature: Setting & Preference.
   + Save settings to registry or file (default is registry)
   + White/black theme (default is white)
   + Auto-check for updates on startup (default is enabled)
- Improved byte unit handling: Everyone can see the file size in KB, MB, GB, etc, without having to peer their eyes at a large number in "byte" unit.
- Enhanced cryptographic operations: Multi-thread operations are now supported, meaning that your files are protected more quickly.
- Fixed a decryption bug: The app now does not accept AES-GCM-encrypted files that were not previously encrypted by the app itself
v1.1.1
- Fixed some bugs:
   + Some windows are now fixed and cannot be resized.
   + The app's title now displays the correct version
   + Users will not see the warning of enabling Process All Files Parallelly option upon startup.
- Optimized code for displaying the app's title
v1.1.2
- Fixed some bugs:
   + The app now restarts after downloading and verifying the new version
   + User can now choose to continue using the app without having to update the program
v1.2.0
- Update feature:
   + Improved UI feedbacks and added Progress feedback for downloading and copying file.
   + Reduced RAM usage for downloading new updates.
- NEW: Debug mode:
   + Developers and testers can now debug the app more easily.
   + Enhance maintainance quality.
   + Users can attach a debugger via Task Manager (run the app with --debug).
- Optimized code for functionality:
   + Prepare the app for new encryption-decryption developments (specifically AES-CTR + HMAC-SHA256, RSA, DPAPI and advanced IO-Lock)
   + Uses more async implementation
v1.2.1:
- Fixed the UI:
   + The app now does not crash when the user IO-Locked, IO-Unlocked and IO-Locked a file again.
   + The selected items for IO-Lock operations now stay fixed instead of being moved to the bottom of the list.
- Fixed a bug in the Debugger: It now also catches exceptions from the WinForms.
- Improved cryptographic operation: Memory is instantly returned to the OS instead of being piled up (with a bit of small overhead).